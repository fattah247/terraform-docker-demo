name: Deploy to EC2 via ECR

on:
  push:
    branches: ["main"]
    paths:
      - "app/**"
      - ".github/workflows/deploy.yml"

jobs:
  deploy:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}   # repo name only
          IMAGE_TAG: latest
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" ./app
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
  
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,AWS_SESSION_TOKEN
          script: |
            set -euxo pipefail

            # Make sure the vars really exist in this remote shell
            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            export AWS_REGION="${AWS_REGION}"
            if [ -n "${AWS_SESSION_TOKEN:-}" ]; then export AWS_SESSION_TOKEN="${AWS_SESSION_TOKEN}"; fi

            # Ensure Docker
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" \
                | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo usermod -aG docker ubuntu || true
              sudo systemctl enable --now docker
            fi

            # Use dockerized AWS CLI with the forwarded envs
            REGISTRY="${{ steps.login-ecr.outputs.registry }}"
            sudo docker run --rm \
              -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_REGION ${AWS_SESSION_TOKEN:+-e AWS_SESSION_TOKEN} \
              amazon/aws-cli \
              ecr get-login-password --region "$AWS_REGION" \
              | sudo docker login --username AWS --password-stdin "$REGISTRY"

            # Deploy with Compose
            sudo mkdir -p /home/ubuntu/phase2
            cd /home/ubuntu/phase2

            cat > docker-compose.yml << 'EOF'
            version: '3.8'
            services:
              web:
                image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:latest
                container_name: tf-docker-demo
                ports:
                  - "80:8080"
                restart: unless-stopped
            EOF

            sudo docker compose pull
            sudo docker compose up -d
            sleep 5
            sudo docker compose ps
