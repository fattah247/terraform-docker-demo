name: Deploy to EC2 via ECR

on:
  push:
    branches: ["main"]
    paths:
      - "app/**"
      - ".github/workflows/deploy.yml"

jobs:
  deploy:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR (runner)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}   # e.g. terraform-docker-demo
          IMAGE_TAG: latest
        run: |
          set -euxo pipefail
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" ./app
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          # forward the creds to this step, then into the remote shell
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          # If you ever switch to temporary creds (STS), also add this secret:
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          # Handy to avoid repeating the strings in the script:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          # forward these variable names into the remote session
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,AWS_SESSION_TOKEN,ECR_REGISTRY,ECR_REPOSITORY
          script: |
            set -euxo pipefail

            # Ensure Docker is present
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" \
                | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo usermod -aG docker ubuntu || true
              sudo systemctl enable --now docker
            fi

            # --- ECR login using dockerized AWS CLI (pass envs *explicitly*; sudo won't drop them) ---
            # If you attach an EC2 instance role with ECR pull permissions, the CLI will use it automatically.
            AWS_ENV_ARGS=""
            if [ -n "${AWS_ACCESS_KEY_ID:-}" ] && [ -n "${AWS_SECRET_ACCESS_KEY:-}" ]; then
              AWS_ENV_ARGS="-e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
              if [ -n "${AWS_SESSION_TOKEN:-}" ]; then
                AWS_ENV_ARGS="${AWS_ENV_ARGS} -e AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}"
              fi
            fi

            # Always pass region explicitly
            sudo docker run --rm \
              -e AWS_REGION="${AWS_REGION}" ${AWS_ENV_ARGS} \
              amazon/aws-cli \
              ecr get-login-password --region "${AWS_REGION}" \
              | sudo docker login --username AWS --password-stdin "${ECR_REGISTRY}"

            # --- Deploy with Compose ---
            sudo mkdir -p /home/ubuntu/phase2
            cd /home/ubuntu/phase2

            cat > docker-compose.yml << 'EOF'
            version: '3.8'
            services:
              web:
                image: __REGISTRY__/__REPO__:latest
                container_name: tf-docker-demo
                ports:
                  - "80:8080"
                restart: unless-stopped
            EOF

            # Fill in registry/repo placeholders safely
            sudo sed -i "s|__REGISTRY__|${ECR_REGISTRY}|g" docker-compose.yml
            sudo sed -i "s|__REPO__|${ECR_REPOSITORY}|g" docker-compose.yml

            # Pull latest and run
            sudo docker compose pull
            sudo docker compose up -d

            # Optional quick status
            sleep 5
            sudo docker compose ps
